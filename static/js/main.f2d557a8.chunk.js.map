{"version":3,"sources":["Questions.js","logo.svg","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["totalQuestions","Questions","props","Object","keys","length","React","useState","currentQuestion","correctAnswers","wrongAnswer","state","toggleincrement","isNextQuesActive","toggleShow","resultVisibility","toggleResult","handleButton","e","answerOption","isCorrect","setTimeout","saveBestScore","target","classList","add","remove","showNextQuestion","window","localStorage","getItem","setItem","console","log","className","id","style","alignItems","marginLeft","marginRight","color","size","onClick","fontSize","textShadow","type","checked","for","questionText","answerOptions","map","disabled","answerText","visibility","Nav","title","App","dataFromApi","setData","useEffect","fetch","then","response","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2d557a8.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { ArrowClockwise, CheckCircleFill ,XCircleFill} from 'react-bootstrap-icons';\r\nvar totalQuestions;\r\nlet bestScore=0;\r\nfunction Questions(props) {\r\n\r\n    totalQuestions = Object.keys(props).length;\r\n    const [state, toggleincrement] = React.useState({ currentQuestion: 0, correctAnswers: 0, wrongAnswer: 0 });\r\n    const [isNextQuesActive, toggleShow] = React.useState(false);\r\n    const [resultVisibility, toggleResult] = React.useState(false);\r\n\r\n    function handleButton(e, answerOption){\r\n        if (state.currentQuestion < totalQuestions) {\r\n            if (answerOption.isCorrect == \"true\") {\r\n                setTimeout(() => {\r\n                    toggleincrement({ currentQuestion: state.currentQuestion + 1, correctAnswers: state.correctAnswers + 1, wrongAnswer: state.wrongAnswer })\r\n                    saveBestScore();\r\n                }, 1500)\r\n                e.target.classList.add(\"right_answer\");\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    toggleincrement({ currentQuestion: state.currentQuestion + 1, correctAnswers: state.correctAnswers, wrongAnswer: state.wrongAnswer + 1 })\r\n                    saveBestScore();\r\n                }, 1500)\r\n                e.target.classList.add(\"wrong_answer\");\r\n            }\r\n            toggleShow(true);\r\n            showNextQuestion(e);\r\n        }\r\n    }\r\n    function showNextQuestion(e) {\r\n        setTimeout(() => {\r\n            toggleShow(false)\r\n            e.target.classList.remove(\"wrong_answer\");\r\n            e.target.classList.remove(\"right_answer\");\r\n        }, 1500)\r\n    }\r\n\r\n    function saveBestScore(){\r\n        if (window.localStorage.getItem(\"best-score\")) {\r\n            if(window.localStorage.getItem(\"best-score\")<state.correctAnswers){\r\n                localStorage.setItem(\"best-score\", state.correctAnswers);\r\n            }\r\n        }else localStorage.setItem(\"best-score\", 0);\r\n        console.log(window.localStorage.getItem(\"best-score\"));\r\n    }\r\n    function getBestScore(){\r\n        return window.localStorage.getItem(\"best-score\");\r\n    }\r\n\r\n    function isButonDisabled() {\r\n        if (isNextQuesActive == true) return true;\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className='Parent'>\r\n            {(state.currentQuestion == totalQuestions) ? (\r\n                <div className='ScoreCard'>\r\n                    {saveBestScore()}\r\n                    <h1 id=\"BestScore\">BestScore : {getBestScore()}</h1>\r\n                    <h1 id=\"CurrentScore\" style={{ alignItems: 'center', marginLeft: 'auto', marginRight: 'auto' }}>You Scored {state.correctAnswers} Out of {totalQuestions}</h1>\r\n                    <ArrowClockwise id=\"reload\" color=\"#ffffff\" size={30} onClick={() => { toggleincrement({ currentQuestion: 0, correctAnswers: 0, wrongAnswer: 0 }) }}></ArrowClockwise>\r\n\r\n                </div>\r\n            )\r\n                :\r\n                (\r\n                    <div className=\"Quiz_Panel_Main\">\r\n                        <h1 className=\"\" style={{ fontSize: \"50px\", color:'#ffffff',textShadow:\"-1px -1px 0 #000\"}}>React Quiz</h1>\r\n                        <div className='quiz'>\r\n                            <div className='questions-section'>\r\n                                <div className=\"checkbox\">\r\n                                    <input type=\"checkbox\" id=\"checkbox\" checked={resultVisibility} onClick={() => toggleResult(!resultVisibility)}></input>\r\n                                    <label for=\"checkbox\">Show Result</label>\r\n                                </div>\r\n                                <h1 className=\"QuestionCount\">Question {state.currentQuestion + 1}<span>/{Object.keys(props).length}</span></h1>\r\n                                <p id=\"question\">{props[state.currentQuestion].questionText}</p>\r\n                            </div>\r\n                            <div className='answer-section'>\r\n                                {props[state.currentQuestion].answerOptions.map((answerOption) => (\r\n                                    <button id=\"btn\" onClick={(e) => handleButton(e, answerOption)} disabled={isButonDisabled()} >{answerOption.answerText}</button>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"LiveResults\">\r\n                            <div className=\"Result\" style={resultVisibility ? { visibility: 'visible' } : { visibility: 'hidden' }}>\r\n                                <div className=\"right_div\">\r\n                                <CheckCircleFill color=\"#3cff00\" size={30} ></CheckCircleFill>\r\n                                    <span id=\"Resultcorrect\">{state.correctAnswers}</span>\r\n\r\n                                </div>\r\n                                <div className=\"wrong_div\">\r\n                                <XCircleFill color=\"#ff2a2a\" size={30} ></XCircleFill>\r\n                                    <span id=\"Resultwrong\">{state.wrongAnswer}</span>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Questions;\r\n//<button className=\"Next\" onClick={()=>showNextButton()} style={{visibility: visibilityState}} >></button>","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport { PersonCircle } from 'react-bootstrap-icons';\r\nfunction Nav() {\r\n\r\n    return (\r\n        <div className=\"Nav\">\r\n             <div className=\"Nav_Appname\">\r\n                <h1 id=\"App_Name\">Rate my skills</h1>\r\n            </div>\r\n            <div className=\"Account\">\r\n                <PersonCircle id=\"logo_account\" title = \"goodbye\" color=\"#ffffff\" size={30} />\r\n                <h3 id=\"select_option\">Ankush Shrivastava</h3>\r\n            </div>\r\n        </div>)\r\n}\r\nexport default Nav;","import logo from './logo.svg';\nimport './App.css';\nimport Questions from './Questions';\nimport React, { useEffect } from 'react';\nimport Nav from './Nav';\nconst api_url='https://raw.githubusercontent.com/4nku5h/Quiz-App/main/api.json';\n\nfunction App() {  \n  const [dataFromApi, setData] = React.useState(null);\n   useEffect(()=>{\n    fetch(api_url)\n    .then((response)=>{\n      return response.json();\n    })\n    .then((data)=>{\n      setData(data);\n    });\n   },[])\n\n    if (dataFromApi==null) return null;\n  return (\n    <div className=\"App\">\n        <Nav/>\n        <Questions {...dataFromApi}/>\n    </div>\n  );\n}\n\n\n//<MyInfo />\n//<TicketComponent {...dataFromApi}/>\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}